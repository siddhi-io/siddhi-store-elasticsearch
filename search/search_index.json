{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Store Elasticsearch The siddhi-store-elasticsearch extension is an extension to Siddhi that persists and retrieve events to/from Elasticsearch For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 3.x and above with group id io.siddhi.extension.* from here . This supports elastic search 7.x.x version and above (based on Siddhi 5.x.x). Versions 2.x and above with group id org.wso2.extension.siddhi.* from here . This supports elastic search 7.x.x version (based on Siddhi 4.x.x). Versions 1.5.x and above with group id io.siddhi.extension.* from here . This supports elastic search 6.x.x version (based on Siddhi 5.x.x). Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . This supports elastic search 6.x.x version (based on Siddhi 4.x.x). Latest API Docs Latest API Docs is 3.2.2 . Features elasticsearch ( Sink ) Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. elasticsearch ( Store ) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Prerequisites Elasticsearch can be downloaded directly from href=\"https://www.elastic.co/downloads/elasticsearch\" in zip, tar.gz, deb, or rpm packages. Then install the version 6.2.4, usual Ubuntu way with dpkg. sudo apt-get update wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/6.2.4/elasticsearch-6.2.4.deb sudo dpkg -i elasticsearch-6.2.4.deb How To Install and Configure Elasticsearch on Ubuntu 16.04 - Also you can start the Elasticsearch server using docker image: docker run -p 9600:9200 -p 9700:9300 -e discovery.type=single-node -e ELASTIC_PASSWORD=MagicWord -d docker.elastic.co/elasticsearch/elasticsearch:6.2.4 Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-store-elasticsearch","text":"The siddhi-store-elasticsearch extension is an extension to Siddhi that persists and retrieve events to/from Elasticsearch For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Store Elasticsearch"},{"location":"#download","text":"Versions 3.x and above with group id io.siddhi.extension.* from here . This supports elastic search 7.x.x version and above (based on Siddhi 5.x.x). Versions 2.x and above with group id org.wso2.extension.siddhi.* from here . This supports elastic search 7.x.x version (based on Siddhi 4.x.x). Versions 1.5.x and above with group id io.siddhi.extension.* from here . This supports elastic search 6.x.x version (based on Siddhi 5.x.x). Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . This supports elastic search 6.x.x version (based on Siddhi 4.x.x).","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 3.2.2 .","title":"Latest API Docs"},{"location":"#features","text":"elasticsearch ( Sink ) Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. elasticsearch ( Store ) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library.","title":"Features"},{"location":"#prerequisites","text":"Elasticsearch can be downloaded directly from href=\"https://www.elastic.co/downloads/elasticsearch\" in zip, tar.gz, deb, or rpm packages. Then install the version 6.2.4, usual Ubuntu way with dpkg. sudo apt-get update wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/6.2.4/elasticsearch-6.2.4.deb sudo dpkg -i elasticsearch-6.2.4.deb How To Install and Configure Elasticsearch on Ubuntu 16.04 - Also you can start the Elasticsearch server using docker image: docker run -p 9600:9200 -p 9700:9300 -e discovery.type=single-node -e ELASTIC_PASSWORD=MagicWord -d docker.elastic.co/elasticsearch/elasticsearch:6.2.4","title":"Prerequisites"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#store","text":"","title":"Store"},{"location":"api/1.0.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#store","text":"","title":"Store"},{"location":"api/1.0.1/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#store","text":"","title":"Store"},{"location":"api/1.0.2/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#store","text":"","title":"Store"},{"location":"api/1.0.3/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The user name for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards for the index in Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); The above example creates an index named MyStockTable on the Elasticsearch server if it does not already exist (with 3 attributes named symbol , price , and volume of the types types string , float and long respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The symbol attribute is considered a unique field, and a Elasticsearch index document id is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#store","text":"","title":"Store"},{"location":"api/1.0.4/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#store","text":"","title":"Store"},{"location":"api/1.0.5/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#store","text":"","title":"Store"},{"location":"api/1.1.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic host The host of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#store","text":"","title":"Store"},{"location":"api/1.1.1/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= MyStockTable ,field.length= symbol:100 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.1.2/","text":"API Docs - v1.1.2 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"1.1.2"},{"location":"api/1.1.2/#api-docs-v112","text":"","title":"API Docs - v1.1.2"},{"location":"api/1.1.2/#store","text":"","title":"Store"},{"location":"api/1.1.2/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.","title":"elasticsearch (Store)"},{"location":"api/1.1.3/","text":"API Docs - v1.1.3 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"1.1.3"},{"location":"api/1.1.3/#api-docs-v113","text":"","title":"API Docs - v1.1.3"},{"location":"api/1.1.3/#store","text":"","title":"Store"},{"location":"api/1.1.3/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/1.1.4/","text":"API Docs - v1.1.4 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.type The the type of the index. _doc STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"1.1.4"},{"location":"api/1.1.4/#api-docs-v114","text":"","title":"API Docs - v1.1.4"},{"location":"api/1.1.4/#store","text":"","title":"Store"},{"location":"api/1.1.4/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.type The the type of the index. _doc STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/1.5.0/","text":"API Docs - v1.5.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"1.5.0"},{"location":"api/1.5.0/#api-docs-v150","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.5.0"},{"location":"api/1.5.0/#store","text":"","title":"Store"},{"location":"api/1.5.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.type The the type of the index. _doc STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#store","text":"","title":"Store"},{"location":"api/2.0.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.type The the type of the index. _doc STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/2.1.0/","text":"API Docs - v2.0.0 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"2.1.0"},{"location":"api/2.1.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.1.0/#store","text":"","title":"Store"},{"location":"api/2.1.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/2.1.1/","text":"API Docs - v2.1.1 Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"2.1.1"},{"location":"api/2.1.1/#api-docs-v211","text":"","title":"API Docs - v2.1.1"},{"location":"api/2.1.1/#store","text":"","title":"Store"},{"location":"api/2.1.1/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.0.0/","text":"API Docs - v3.0.0 Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.type The the type of the index. _doc STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.0.0"},{"location":"api/3.0.0/#api-docs-v300","text":"Tested Siddhi Core version: 5.1.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.0"},{"location":"api/3.0.0/#store","text":"","title":"Store"},{"location":"api/3.0.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No index.type The the type of the index. _doc STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.1.0/","text":"API Docs - v3.1.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.1.0"},{"location":"api/3.1.0/#api-docs-v310","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.1.0"},{"location":"api/3.1.0/#store","text":"","title":"Store"},{"location":"api/3.1.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.1.1/","text":"API Docs - v3.1.1 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.1.1"},{"location":"api/3.1.1/#api-docs-v311","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.1.1"},{"location":"api/3.1.1/#store","text":"","title":"Store"},{"location":"api/3.1.1/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index. The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.1.2/","text":"API Docs - v3.1.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.1.2"},{"location":"api/3.1.2/#api-docs-v312","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.1.2"},{"location":"api/3.1.2/#store","text":"","title":"Store"},{"location":"api/3.1.2/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.2.0/","text":"API Docs - v3.2.0 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink elasticsearch (Sink) Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.2.0"},{"location":"api/3.2.0/#api-docs-v320","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.2.0"},{"location":"api/3.2.0/#sink","text":"","title":"Sink"},{"location":"api/3.2.0/#elasticsearch-sink","text":"Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document.","title":"elasticsearch (Sink)"},{"location":"api/3.2.0/#store","text":"","title":"Store"},{"location":"api/3.2.0/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.2.1/","text":"API Docs - v3.2.1 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink elasticsearch (Sink) Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.2.1"},{"location":"api/3.2.1/#api-docs-v321","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.2.1"},{"location":"api/3.2.1/#sink","text":"","title":"Sink"},{"location":"api/3.2.1/#elasticsearch-sink","text":"Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document.","title":"elasticsearch (Sink)"},{"location":"api/3.2.1/#store","text":"","title":"Store"},{"location":"api/3.2.1/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/3.2.2/","text":"API Docs - v3.2.2 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Sink elasticsearch (Sink) Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"3.2.2"},{"location":"api/3.2.2/#api-docs-v322","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.2.2"},{"location":"api/3.2.2/#sink","text":"","title":"Sink"},{"location":"api/3.2.2/#elasticsearch-sink","text":"Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document.","title":"elasticsearch (Sink)"},{"location":"api/3.2.2/#store","text":"","title":"Store"},{"location":"api/3.2.2/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"},{"location":"api/latest/","text":"API Docs - v3.2.2 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Sink elasticsearch (Sink) Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document. Store elasticsearch (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"latest"},{"location":"api/latest/#api-docs-v322","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.2.2"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#elasticsearch-sink","text":"Elasticsearch sink implementation uses Elasticsearch indexing document for underlying data storage. The events that are published from the sink will be converted into elasticsearch index documents. The elasticsearch sink is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library. By using this sink, we can customize the json document before it's stored in the elasticsearch. Syntax @sink(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @sink(type='elasticsearch', hostname='172.0.0.1', port='9200',index.name='stock_index', @map(type='json', @payload( { Stock Data :{ Symbol : {{symbol}} , Price :{{price}}, Volume :{{volume}} } } )))define stream stock_stream(symbol string, price float, volume long); This will create an index called 'stock_index' if it does not already exist in the elasticsearch server and saves the custom json document.","title":"elasticsearch (Sink)"},{"location":"api/latest/#store","text":"","title":"Store"},{"location":"api/latest/#elasticsearch-store","text":"Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elasticsearch server via the Elasticsearch Java High Level REST Client library. Syntax @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING , backoff.policy= STRING , backoff.policy.retry.no= INT , backoff.policy.wait.time= INT ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hostname The hostname of the Elasticsearch server. localhost STRING Yes No port The port of the Elasticsearch server. 9200 INT Yes No scheme The scheme type of the Elasticsearch server connection. http STRING Yes No elasticsearch.member.list The list of elasticsearch host names. in comma separated manner https://hostname1:9200,https://hostname2:9200 null STRING Yes No username The username for the Elasticsearch server connection. elastic STRING Yes No password The password for the Elasticsearch server connection. changeme STRING Yes No index.name The name of the Elasticsearch index.This must be in lower case The table name defined in the Siddhi App query. STRING Yes No payload.index.of.index.name The payload which is used to create the index. This can be used if the user needs to create index names dynamically. This must be in lower case. If this parameter is configured then respective elasticsearch table can be only used for insert operations because indices are created in the runtime dynamically. -1 INT Yes No index.alias The alias of the Elasticsearch index. null STRING Yes No index.number.of.shards The number of shards allocated for the index in the Elasticsearch server. 3 INT Yes No index.number.of.replicas The number of replicas for the index in the Elasticsearch server. 2 INT Yes No bulk.actions The number of actions to be added to flush a new bulk request. Use -1 to disable it 1 INT Yes No bulk.size The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it 1 LONG Yes No concurrent.requests The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request 0 INT Yes No flush.interval The flush interval flushing any BulkRequest pending if the interval passes. 10 LONG Yes No backoff.policy.retry.no The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). 3 INT Yes No backoff.policy.wait.time The constant back off policy that initially waits until the next retry in seconds. 1 LONG Yes No ssl.enabled SSL is enabled or not. null BOOL Yes No trust.store.type Trust store type. jks STRING Yes No trust.store.path Trust store path. null STRING Yes No trust.store.pass Trust store password. wso2carbon STRING Yes No backoff.policy Provides a backoff policy(eg: constantBackoff, exponentialBackoff, disable) for bulk requests, whenever a bulk request is rejected due to resource constraints. Bulk processor will wait before the operation is retried internally. constantBackoff STRING Yes No backoff.policy.retry.no The maximum number of retries. Must be a non-negative number. 3 INT Yes No backoff.policy.wait.time The delay defines how long to wait between retry attempts. Must not be null. 1 INT Yes No Examples EXAMPLE 1 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example creates an index named 'mystocktable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it. EXAMPLE 2 @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example uses SSL to connect to Elasticsearch. EXAMPLE 3 @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= mystocktable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 ) @PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long); This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.","title":"elasticsearch (Store)"}]}